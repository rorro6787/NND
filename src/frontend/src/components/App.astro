---

---

<h1 class="text-6xl sm:text-7xl lg:text-8xl font-bold tracking-tight text-gray-800 dark:text-white text-center mb-12">
  MRI Brain Neuropathologies Detection System
</h1>

<div id="container">
  <div style="height: 80px;"></div>
  <h1 id="app-demo-title">APP DEMO (<span class="yolo">YOLOv8</span>)</h1>
  <form action="#" method="post" id="image-upload-form" enctype="multipart/form-data">
    <div class="subject">
      <label for="subject"></label>
      <select name="subject" id="subject_input" required>
        <option value="" disabled hidden selected>Select an option</option>
        <option>yolov8n.pt</option>
        <option>yolov8s.pt</option>
        <option>yolov8m.pt</option>
        <option>yolov8l.pt</option>
        <option>yolov8x.pt</option>
      </select>
    </div>

    <div style="height: 50px;"></div>

    <div class="subject">
      <label for="subject">Upload an Image:</label>
      <div style="height: 10px;"></div>
      <div id="drop-area" class="mt-2 p-4 border border-gray-300 rounded-md dark:border-gray-600 flex flex-col justify-center items-center" style="text-align: center; cursor: pointer;">
        <input type="file" name="image" accept="image/*" id="fileElem" class="hidden" required />
        <p id="drop-message">Drag and drop your MRI scan file</p>
        <span id="file-name" class="mt-2 block"></span>
      </div>
    </div>

    <div style="height: 40px;"></div>

    <div class="subject flex justify-center">
      <div id="spinner" class="hidden"></div>
      <button type="submit" class="btn-orange">Submit</button>
    </div>
    <div style="height: 20px;"></div>
  </form>
</div>

<div id="image-preview" class="mt-8 hidden">
  <h2 class="text-xl text-center">Processed Images</h2>
  <div id="processed-images" class="flex space-x-4 mt-4"></div>
</div>

<style>
  @import url(https://fonts.googleapis.com/css?family=Montserrat:400,700);

  .hidden {
    display: none;
  }

  #spinner {
    border: 4px solid rgba(0, 0, 0, 0.1);
    width: 36px;
    height: 36px;
    border-radius: 50%;
    border-left-color: orange;
    animation: spin 1s linear infinite;
    margin-right: 10px; /* Adjust margin as needed */
  }

  @keyframes spin {
    to {
      transform: rotate(360deg);
    }
  }

  form.submitting #spinner {
    display: inline-block;
  }

  form.submitting button {
    display: none;
  }

  html {
    font-family: 'Montserrat', Arial, sans-serif;
    -ms-text-size-adjust: 100%;
    -webkit-text-size-adjust: 100%;
  }

  button {
    overflow: visible;
  }

  button,
  select {
    text-transform: none;
  }

  button,
  input,
  select,
  textarea {
    color: #5A5A5A;
    font: inherit;
    margin: 0;
  }

  input {
    line-height: normal;
  }

  #container {
    background: linear-gradient(to right, #58a6ff, #004080);
    border: solid 3px blue;
    margin: 60px auto;
    position: relative;
    border-radius: 15px;
  }

  form {
    padding: 37.5px;
    margin: 50px 0;
  }

  h1 {
    color: #474544;
    font-size: 40px;
    font-weight: 700;
    letter-spacing: 7px;
    text-align: center;
    text-transform: uppercase;
    margin-bottom: 20px;
    line-height: 1.5;
  }

  .underline {
    border-bottom: solid 2px #474544;
    margin: -0.512em auto;
    width: 80px;
  }

  .icon_wrapper {
    margin: 50px auto 0;
    width: 100%;
  }

  .icon {
    display: block;
    fill: #474544;
    height: 50px;
    margin: 0 auto;
    width: 50px;
  }

  .email {
    float: right;
    width: 45%;
  }

  input[type='text'],
  [type='email'],
  select,
  textarea {
    background: none;
    border: none;
    border-bottom: solid 2px #474544;
    color: #474544;
    font-size: 1.000em;
    font-weight: 400;
    letter-spacing: 1px;
    margin: 0em 0 1.875em 0;
    padding: 0 0 0.875em 0;
    text-transform: uppercase;
    width: 100%;
    box-sizing: border-box;
    transition: all 0.3s;
  }

  input[type='text']:focus,
  [type='email']:focus,
  textarea:focus {
    outline: none;
    padding: 0 0 0.875em 0;
  }

  .message {
    float: none;
  }

  .name {
    float: left;
    width: 45%;
  }

  select {
    background: url('https://cdn4.iconfinder.com/data/icons/ionicons/512/icon-ios7-arrow-down-32.png') no-repeat right;
    outline: none;
    -moz-appearance: none;
    -webkit-appearance: none;
  }

  select::-ms-expand {
    display: none;
  }

  .subject {
    width: 100%;
  }

  .telephone {
    width: 100%;
  }

  textarea {
    line-height: 150%;
    height: 150px;
    resize: none;
    width: 100%;
  }

  ::-webkit-input-placeholder {
    color: black;
    font-weight: bold;
  }

  :-moz-placeholder {
    color: black;
    font-weight: bold;
    opacity: 1;
  }

  ::-moz-placeholder {
    color: black;
    font-weight: bold;
    opacity: 1;
  }

  :-ms-input-placeholder {
    color: black;
    font-weight: bold;
  }

  #form_button {
    background: none;
    border: solid 2px white;
    color: white;
    cursor: pointer;
    display: inline-block;
    font-family: 'Helvetica', Arial, sans-serif;
    font-size: 0.875em;
    font-weight: bold;
    outline: none;
    padding: 20px 35px;
    text-transform: uppercase;
    transition: all 0.3s;
  }

  #form_button:hover {
    background: white;
    color: #F2F3EB;
  }

  @media screen and (max-width: 768px) {
    #container {
      margin: 20px auto;
      width: 95%;
    }
  }

  @media screen and (max-width: 480px) {
    h1 {
      font-size: 26px;
    }

    .underline {
      width: 68px;
    }

    #form_button {
      padding: 15px 25px;
    }
  }

  @media screen and (max-width: 420px) {
    h1 {
      font-size: 18px;
    }

    .icon {
      height: 35px;
      width: 35px;
    }

    .underline {
      width: 53px;
    }

    input[type='text'],
    [type='email'],
    select,
    textarea {
      font-size: 0.875em;
    }
  }

  .btn-orange {
    background: linear-gradient(135deg, #ff0000, #000000);
    border: none;
    color: #ffffff;
    border-radius: 8px;
    box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
    transition: background 0.3s, box-shadow 0.3s, transform 0.3s;
    padding: 10px 20px;
    margin-top: 20px;
    transform: scale(1.25);
  }

  .btn-orange:hover {
    background: linear-gradient(135deg, #cc0000, #000000);
    box-shadow: 0px 6px 8px rgba(0, 0, 0, 0.2);
    transform: scale(1.2);
  }

  #drop-area {
    border: 2px dashed darkorchid;
    border-radius: 8px;
    transition: background 0.3s, border-color 0.3s;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    height: 200px;
    position: relative;
  }

  #drop-area:hover {
    background: rgba(88, 166, 255, 0.2);
    border-color: #004080;
  }

  .highlight {
    background-color: rgba(88, 166, 255, 0.2);
    border-color: #004080;
    text-transform: none;
  }

  .yolo {
    border-color: #004080;
    text-transform: none;
  }

  label {
    color: black;
    font-family: 'Montserrat', Arial, sans-serif;
    font-weight: bold;
  }

  .subject select,
  .subject p {
    color: black;
    font-family: 'Montserrat', Arial, sans-serif;
    font-weight: bold;
  }

  #file-name {
    color: black;
    font-family: 'Montserrat', Arial, sans-serif;
    font-weight: bold;
    position: center;
    bottom: 10px;
  }

  #app-demo-title {
    color: black;
    font-family: 'Montserrat', Arial, sans-serif;
    font-weight: bold;
    text-align: center;
    margin: 20px 0;
  }

  .subject select {
    appearance: none;
    -webkit-appearance: none;
    -moz-appearance: none;
    background: linear-gradient(135deg, #58a6ff, #004080);
    border: 2px solid #004080;
    border-radius: 8px;
    padding: 12px;
    color: black;
    font-family: 'Montserrat', Arial, sans-serif;
    font-size: 16px;
    font-weight: bold;
    cursor: pointer;
    outline: none;
    transition: background 0.3s, border-color 0.3s;
    width: 100%;
    text-transform: none;
    background-image: url('https://cdn4.iconfinder.com/data/icons/ionicons/512/icon-ios7-arrow-down-32.png');
    background-repeat: no-repeat;
    background-position: right 12px center;
    border-radius: 15px;
  }

  .subject select:hover {
    background: linear-gradient(135deg, #004080, #58a6ff);
    border-color: #58a6ff;
    border-radius: 15px;
  }

  .subject option {
    color: #000000;
    background-color: bisque;
    padding: 8px;
    border-radius: 15px;
  }

  select::-ms-expand {
    display: none;
    border-radius: 15px;
  }

  @media screen and (max-width: 480px) {
    .subject select {
      font-size: 14px;
      padding: 10px;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('image-upload-form') as HTMLFormElement;
    const imagePreview = document.getElementById('image-preview') as HTMLElement;
    const dropArea = document.getElementById('drop-area') as HTMLElement;
    const fileInput = document.getElementById('fileElem') as HTMLInputElement;
    const fileNameDisplay = document.getElementById('file-name') as HTMLSpanElement;
    const dropMessage = document.getElementById('drop-message') as HTMLParagraphElement;
    const processedImagesContainer = document.getElementById('processed-images') as HTMLElement;

    // Prevent default drag behaviors for drag events
    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
      dropArea.addEventListener(eventName, preventDefaults, false);
      document.body.addEventListener(eventName, preventDefaults, false);
    });

    // Highlight the drop area when an item is dragged over it
    ['dragenter', 'dragover'].forEach(eventName => {
      dropArea.addEventListener(eventName, highlight, false);
    });

    // Remove highlight from drop area when item is no longer hovering over it
    ['dragleave', 'drop'].forEach(eventName => {
      dropArea.addEventListener(eventName, unhighlight, false);
    });

    form.addEventListener('submit', async (event) => {
      event.preventDefault(); // Prevent page reload
      form.classList.add('submitting'); // Show spinner

      const formData = new FormData(form); // Create FormData object with form data
      const userFile = fileInput.files?.[0]; // Get the uploaded user file
      if (userFile) {
        fileNameDisplay.textContent = userFile.name; // Display file name
        dropMessage.style.display = 'none'; // Hide the initial message
      }

      try {
        // Send the image and selected model to the server for upload
        const response = await fetch(import.meta.env.PUBLIC_API_URL + '/api/upload', {
          method: 'POST',
          body: formData, // FormData already includes the selector value
        });

        if (!response.ok) {
          throw new Error('Error uploading image'); // Throw error if upload fails
        }

        const jsonResponse = await response.json(); // Convert response to JSON

        // Clear previous images
        processedImagesContainer.innerHTML = '';

        // Display each processed image
        jsonResponse.images.forEach((imageUrl: string) => {
          const imgElement = document.createElement('img');
          imgElement.src = `data:image/jpeg;base64,${imageUrl}`; // Use the base64 string with the data URL scheme
          imgElement.alt = 'Processed Image';
          imgElement.classList.add('processed-image');
          processedImagesContainer.appendChild(imgElement);
        });

        imagePreview.classList.remove('hidden'); // Show image preview container

      } catch (error) {
        console.error('Error:', error); // Log any errors
      } finally {
        form.classList.remove('submitting'); // Hide spinner
      }
    });

    // Add an event listener for file input change
    fileInput.addEventListener('change', (e: Event) => {
      const target = e.target as HTMLInputElement; // Ensure it's an HTMLInputElement
      const files = target.files; // Get selected files
      if (files && files.length > 0) {
        handleFiles(files); // Handle the selected files
      }
    });

    // Handle dropped files in the drop area
    dropArea.addEventListener('drop', (e: DragEvent) => {
      e.preventDefault(); // Prevent default behavior
      const dt = e.dataTransfer;

      if (dt && dt.files) {
        const files = dt.files;
        handleFiles(files); // Handle the dropped files
      } else {
        console.error("No files found in the data transfer.");
      }
    });

    // Open file dialog when clicking on the drop area
    dropArea.addEventListener('click', () => fileInput.click(), false);

    // Prevent default behavior of events
    function preventDefaults(e: Event) {
      e.preventDefault();
      e.stopPropagation();
    }

    // Highlight the drop area
    function highlight() {
      dropArea.classList.add('highlight');
    }

    // Remove highlight from drop area
    function unhighlight() {
      dropArea.classList.remove('highlight');
    }

    // Handle files (check and display)
    function handleFiles(files: FileList) {
      if (files.length > 0) {
        const file = files[0]; // Get the first dragged file
        const dataTransfer = new DataTransfer(); // Create a new DataTransfer object
        dataTransfer.items.add(file); // Add the file to DataTransfer
        fileInput.files = dataTransfer.files; // Assign files to input
        fileNameDisplay.textContent = file.name; // Display file name
        dropMessage.style.display = 'none'; // Hide the initial message
      }
    }
  });
</script>