---
---

<h1
  class="text-4xl font-bold tracking-tight text-gray-800 sm:text-5xl dark:text-white text-center"
>
  MRI Brain Disease Detection System
</h1>

<!-- Formulario para cargar una imagen -->
<form class="mt-8 flex flex-col items-center" id="image-upload-form" enctype="multipart/form-data">
  <label class="mb-2 text-lg font-semibold text-gray-800 dark:text-gray-300">
    Upload an Image:
    <input 
      type="file" 
      name="image" 
      accept="image/*" 
      class="mt-2 p-2 border border-gray-300 rounded-md dark:border-gray-600"
      required
    />
  </label>
  <button 
    type="submit" 
    class="mt-4 px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 transition"
  >
    Submit
  </button>
</form>

<!-- Contenedor para mostrar la imagen -->
<div id="image-preview" class="mt-8 hidden">
  <h2 class="text-2xl font-semibold text-gray-800 dark:text-white">Image Preview:</h2>
  <div class="flex space-x-4"> <!-- Flexbox para mostrar las imágenes lado a lado -->
    <img id="user-image" src="" alt="Uploaded Image" class="mt-4 max-w-xs rounded-md shadow-md" />
    <img id="server-image" src="" alt="Processed Image from Server" class="mt-4 max-w-xs rounded-md shadow-md" /> <!-- Segunda imagen -->
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('image-upload-form') as HTMLFormElement; // Type assertion
    const imagePreview = document.getElementById('image-preview') as HTMLElement; // Type assertion
    const userImage = document.getElementById('user-image') as HTMLImageElement; // Type assertion
    const serverImage = document.getElementById('server-image') as HTMLImageElement; // Type assertion

    form.addEventListener('submit', async (event) => {
      event.preventDefault(); // Evitar la recarga de la página
      const formData = new FormData(form); // Crear un objeto FormData con los datos del formulario

      // Obtener el archivo de imagen subido
      const fileInput = form.elements.namedItem('image') as HTMLInputElement; // Obtener el campo de imagen
      const userFile = fileInput.files?.[0]; // Obtener el archivo subido por el usuario
      if (userFile) {
        const userImageUrl = URL.createObjectURL(userFile); // Crear URL de objeto para la imagen del usuario
        userImage.src = userImageUrl; // Mostrar la imagen del usuario
      }

      try {
        const response = await fetch(import.meta.env.PUBLIC_API_URL + '/api/upload', {
          method: 'POST',
          body: formData,
        });

        if (!response.ok) {
          throw new Error('Error en la carga de la imagen');
        }

        const blob = await response.blob(); // Obtener la imagen como un Blob
        const serverImageUrl = URL.createObjectURL(blob); // Crear una URL de objeto para mostrar la imagen devuelta por el servidor

        // Mostrar la imagen procesada en el contenedor
        serverImage.src = serverImageUrl; 
        imagePreview.classList.remove('hidden'); // Mostrar el contenedor de la imagen
      } catch (error) {
        console.error('Error:', error);
      }
    });
  });
</script>
